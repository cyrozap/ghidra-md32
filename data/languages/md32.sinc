define endian=big;
define alignment=2;

define space PMEM type=ram_space size=4 default;
define space DMEM type=ram_space size=4;
define space register type=register_space size=4;

define register offset=0 size=4 [
	r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15

	sr ipc isr
	lf ls0 le0 lc0 ls1 le1 lc1 ls2 le2 lc2

	a0h a0l
];

define register offset=0x1000 size=4 pc;

define register offset=0x2000 size=4 contextreg;

define context contextreg
	bundle = (0, 0) noflow
;

define token instr32(32)
	op_31_25 = (25, 31)
	op_31_24 = (24, 31)
	op_31_23 = (23, 31)
	op_31_22 = (22, 31)
	op_31_21 = (21, 31)
	op_31_20 = (20, 31)
	op_31_17 = (17, 31)
	op_31_12 = (12, 31)
	op_31_8 = (8, 31)
	op_31_4 = (4, 31)
	op_15_13 = (13, 15)
	imm_23_8 = (8, 23)
	imm_4_0 = (0, 4)
	simm_24_4 = (4, 24) signed
	simm_23_8 = (8, 23) signed
	simm_22_8 = (8, 22) signed
	simm_21_18 = (18, 21) signed
	simm_20_0 = (0, 20) signed
	simm_19_8 = (8, 19) signed
	simm_17_9 = (9, 17) signed
	a0hl = (16, 16)
	r_8_5 = (5, 8)
	rs2 = (8, 11)
	rs1 = (4, 7)
	csrd = (0, 3)
	rd = (0, 3)
;

define token instr16(16)
	op_15_11 = (11, 15)
	op_15_10 = (10, 15)
	op_15_9 = (9, 15)
	op_15_8 = (8, 15)
	op_15_7 = (7, 15)
	op_15_6 = (6, 15)
	op_15_4 = (4, 15)
	op_15_0 = (0, 15)
	imm_9_7 = (7, 9)
	imm_9_4 = (4, 9)
	imm_8_4 = (4, 8)
	imm_8_3 = (3, 8)
	imm_7_0 = (0, 7)
	simm_10_4 = (4, 10) signed
	simm_8_4 = (4, 8) signed
	simm_6_0 = (0, 6) signed
	rm = (4, 7)
	rm_r1_r8_6_4 = (4, 6)
	rm_6_3 = (3, 6)
	rm_r1_r8_5_3 = (3, 5)
	rn = (0, 3)
	rn_even = (0, 2)
	rn_odd = (0, 2)
	rn_r1_r8 = (0, 2)
;

attach variables [ rd rs1 rs2 r_8_5 rn rm rm_6_3 ] [
	r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15
];

attach variables [ rn_r1_r8 rm_r1_r8_5_3 rm_r1_r8_6_4 ] [
	r1 r2 r3 r4 r5 r6 r7 r8
];

attach variables [ rn_even ] [
	r0 r2 r4 r6 r8 r10 r12 r14
];

attach variables [ rn_odd ] [
	r1 r3 r5 r7 r9 r11 r13 r15
];

attach variables [ csrd ] [
	sr ipc isr _ lf ls0 le0 lc0 ls1 le1 lc1 ls2 le2 lc2 _ _
];

attach variables [ a0hl ] [
	a0h a0l
];


# 32-bit instructions

# Move signed immediate to register.
:mv rd, #simm_24_4 is bundle=0 & op_31_25=0 & simm_24_4 & rd {
	rd = simm_24_4;
}

# Unsigned division.
:udiv rd, rs2 is bundle=0 & op_31_12=0x040dc & rs2 & rd {
	a0l = rd / rs2;
	a0h = rd % rs2;
}

# Also unsigned division. Maybe the u/s are for unsaturating/saturating?
# TODO: Find out how sdiv differs from udiv.
:sdiv rd, rs2 is bundle=0 & op_31_12=0x040dd & rs2 & rd {
	a0l = rd / rs2;
	a0h = rd % rs2;
}

# Conditional inversion.
:cinv rd, rs1, rs2 is bundle=0 & op_31_12=0x0407e & rs2 & rs1 & rd {
	# If rs1 is positive, rd=rs2.
	if (rs1 s< 0) goto <negative>;
	rd = rs2;
	goto <end>;
	<negative>
	# If rs1 is negative, rd=-rs2.
	rd = -rs2;
	<end>
}

# Move from accumulator(?) to register.
:mv rd, a0hl is bundle=0 & op_31_17=0b000001000001011 & a0hl & op_15_13=0b001 & rd {
	rd = a0hl;
}

# Move from register to CSR.
:mv csrd, rs1 is bundle=0 & op_31_8=0x041820 & rs1 & csrd {
	csrd = rs1;
}

# ADD a register with an immediate.
:add rd, rs1, #simm_23_8 is bundle=0 & op_31_24=0x08 & simm_23_8 & rs1 & rd {
	rd = rs1 + simm_23_8;
}

# OR a register with an immediate.
:or rd, rs1, #imm_23_8 is bundle=0 & op_31_24=0x0d & imm_23_8 & rs1 & rd {
	rd = rs1 | imm_23_8;
}

# Set the high 16 bits of a register, clearing the lower bits.
:sethi rd, #imm_23_8 is bundle=0 & op_31_24=0x0f & imm_23_8 & rs1=0 & rd {
	rd = imm_23_8 << 16;
}

# Branch if less-than or equal, signed.
:ble rs1, rd, #jump_dest is bundle=0 & op_31_23=0b000110000 & simm_22_8 & rs1 & rd [
	jump_dest = inst_start + simm_22_8 * 2;
] {
	if !(rs1 s<= rd) goto inst_next;
	goto [jump_dest:4];
}

# Branch if immediate less than or equal to register, signed, delayed by 1.
:ble #calc_imm, r_8_5, #jump_dest is bundle=0 & op_31_22=0b0001100010 & simm_21_18 & simm_17_9 & r_8_5 & imm_4_0 [
	calc_imm = (simm_21_18 << 5) | imm_4_0;
	jump_dest = inst_start + simm_17_9 * 2;
] {
	local flag = (calc_imm:4 s<= r_8_5);
	if !flag goto inst_next;
	goto [jump_dest:4];
}

# Branch if register less than or equal to immediate, signed, delayed by 1.
:ble.d1 r_8_5, #calc_imm, #jump_dest is bundle=0 & op_31_22=0b0001000011 & simm_21_18 & simm_17_9 & r_8_5 & imm_4_0 [
	calc_imm = (simm_21_18 << 5) | imm_4_0;
	jump_dest = inst_start + simm_17_9 * 2;
] {
	local delayflag = (r_8_5 s<= calc_imm:4);
	delayslot(1);
	if !delayflag goto inst_next;
	goto [jump_dest:4];
}

# Branch if less-than, signed.
:blt rs1, rd, #jump_dest is bundle=0 & op_31_23=0b000110100 & simm_22_8 & rs1 & rd [
	jump_dest = inst_start + simm_22_8 * 2;
] {
	if !(rs1 s< rd) goto inst_next;
	goto [jump_dest:4];
}

# Branch if register less than immediate, signed, delayed by 1.
:blt.d1 r_8_5, #calc_imm, #jump_dest is bundle=0 & op_31_22=0b0001001011 & simm_21_18 & simm_17_9 & r_8_5 & imm_4_0 [
	calc_imm = (simm_21_18 << 5) | imm_4_0;
	jump_dest = inst_start + simm_17_9 * 2;
] {
	local delayflag = (r_8_5 s< calc_imm:4);
	delayslot(1);
	if !delayflag goto inst_next;
	goto [jump_dest:4];
}

# Branch if less-than, unsigned.
:bltu.d1 rs1, rd, #jump_dest is bundle=0 & op_31_23=0b000100110 & simm_22_8 & rs1 & rd [
	jump_dest = inst_start + simm_22_8 * 2;
] {
	local delayflag = (rs1 < rd);
	delayslot(1);
	if !delayflag goto inst_next;
	goto [jump_dest:4];
}

# Branch if registers are not equal.
:bne rs1, rd, #jump_dest is bundle=0 & op_31_23=0b000111010 & simm_22_8 & rs1 & rd [
	jump_dest = inst_start + simm_22_8 * 2;
] {
	if !(rs1 != rd) goto inst_next;
	goto [jump_dest:4];
}

# Branch if immediate not equal to register.
:bne #calc_imm, r_8_5, #jump_dest is bundle=0 & op_31_22=0b0001110110 & simm_21_18 & simm_17_9 & r_8_5 & imm_4_0 [
	calc_imm = (simm_21_18 << 5) | imm_4_0;
	jump_dest = inst_start + simm_17_9 * 2;
] {
	local flag = (calc_imm:4 != r_8_5);
	if !flag goto inst_next;
	goto [jump_dest:4];
}

# Unconditional relative jump.
:j #jump_dest is bundle=0 & op_31_21=0b00011110000 & simm_20_0 [
	jump_dest = inst_start + simm_20_0 * 2;
] {
	goto [jump_dest:4];
}

# Unconditional relative jump with link.
:jal #jump_dest is bundle=0 & op_31_21=0b00011111000 & simm_20_0 [
	jump_dest = inst_start + simm_20_0 * 2;
] {
	r15 = inst_next;
	call [jump_dest:4];
}

# Unconditional absolute jump to register with link.
:jal rd is bundle=0 & op_31_4=0x1f80000 & rd {
	r15 = inst_next;
	call [rd];
}

# Load byte from an offset relative to a register, zero extending.
:lbu rs1, #simm_19_8(rd) is bundle=0 & op_31_20=0x060 & simm_19_8 & rs1 & rd {
	rs1 = zext(*[DMEM]:1 (rd + simm_19_8));
}

# Load half word from an offset relative to a register, zero extending.
:lhu rs1, #simm_19_8(rd) is bundle=0 & op_31_20=0x061 & simm_19_8 & rs1 & rd {
	rs1 = zext(*[DMEM]:2 (rd + simm_19_8));
}

# Load byte from an offset relative to a register, sign extending.
:lb rs1, #simm_19_8(rd) is bundle=0 & op_31_20=0x062 & simm_19_8 & rs1 & rd {
	rs1 = sext(*[DMEM]:1 (rd + simm_19_8));
}

# Load half word from an offset relative to a register, sign extending.
:lh rs1, #simm_19_8(rd) is bundle=0 & op_31_20=0x063 & simm_19_8 & rs1 & rd {
	rs1 = sext(*[DMEM]:2 (rd + simm_19_8));
}

# Load word from an offset relative to a register.
:lw rs1, #simm_19_8(rd) is bundle=0 & op_31_20=0x064 & simm_19_8 & rs1 & rd {
	rs1 = *[DMEM](rd + simm_19_8);
}

# Store byte at an offset relative to a register.
:sb rs1, #simm_19_8(rd) is bundle=0 & op_31_20=0x065 & simm_19_8 & rs1 & rd {
	*[DMEM](rd + simm_19_8) = rs1:1;
}

# Store half word at an offset relative to a register.
:sh rs1, #simm_19_8(rd) is bundle=0 & op_31_20=0x066 & simm_19_8 & rs1 & rd {
	*[DMEM](rd + simm_19_8) = rs1:2;
}

# Store word at an offset relative to a register.
:sw rs1, #simm_19_8(rd) is bundle=0 & op_31_20=0x067 & simm_19_8 & rs1 & rd {
	*[DMEM](rd + simm_19_8) = rs1;
}

# Copy the (signed) max of the values of two registers into a register.
:max rd, rs1, rs2 is bundle=0 & op_31_12=0x20000 & rs2 & rs1 & rd {
	if (rs1 s> rs2) goto <rs1_greater>;
	rd = rs2;
	goto <end>;
	<rs1_greater>
	rd = rs1;
	<end>
}

# Copy the (signed) min of the values of two registers into a register.
:min rd, rs1, rs2 is bundle=0 & op_31_12=0x20001 & rs2 & rs1 & rd {
	if (rs1 s< rs2) goto <rs1_lesser>;
	rd = rs2;
	goto <end>;
	<rs1_lesser>
	rd = rs1;
	<end>
}

# Max of two 16-bit integers in two registers.
:maxd rd, rs1, rs2 is bundle=0 & op_31_12=0x20005 & rs2 & rs1 & rd {
	local rs1_lo:2 = rs1:2;
	local rs1_hi:2 = rs1(2);
	local rs2_lo:2 = rs2:2;
	local rs2_hi:2 = rs2(2);

	# Find the signed maximum of the lower halves of rs1 and rs2.
	if (rs1_lo s> rs2_lo) goto <rs1_low_greater>;
	rd = rs2 & 0xffff;
	goto <end_low>;
	<rs1_low_greater>
	rd = rs1 & 0xffff;
	<end_low>

	# Find the signed maximum of the upper halves of rs1 and rs2.
	if (rs1_hi s> rs2_hi) goto <rs1_high_greater>;
	rd = rd | (rs2 & 0xffff0000);
	goto <end_high>;
	<rs1_high_greater>
	rd = rd | (rs1 & 0xffff0000);
	<end_high>
}

# Min of two 16-bit integers in two registers.
:mind rd, rs1, rs2 is bundle=0 & op_31_12=0x20007 & rs2 & rs1 & rd {
	local rs1_lo:2 = rs1:2;
	local rs1_hi:2 = rs1(2);
	local rs2_lo:2 = rs2:2;
	local rs2_hi:2 = rs2(2);

	# Find the signed minimum of the lower halves of rs1 and rs2.
	if (rs1_lo s< rs2_lo) goto <rs1_low_lesser>;
	rd = rs2 & 0xffff;
	goto <end_low>;
	<rs1_low_lesser>
	rd = rs1 & 0xffff;
	<end_low>

	# Find the signed minimum of the upper halves of rs1 and rs2.
	if (rs1_hi s< rs2_hi) goto <rs1_high_lesser>;
	rd = rd | (rs2 & 0xffff0000);
	goto <end_high>;
	<rs1_high_lesser>
	rd = rd | (rs1 & 0xffff0000);
	<end_high>
}


# Stand-alone 16-bit instructions.

# 16-bit NOP.
:nop16 is op_15_0=0x8000 {}

# Another 16-bit NOP.
:nop16.l is op_15_0=0xa000 {}

# Add a signed immediate to a register.
:add16 rn, #simm_8_4 is op_15_9=0b1000011 & simm_8_4 & rn {
	rn = rn + simm_8_4;
}

# Add an unsigned immediate to the stack pointer and store it in a register.
:add16 rn, r14, #offset is r14 & op_15_10=0b100101 & imm_9_4 & rn [
	offset = -0x100 + imm_9_4 * 4;
] {
	rn = r14 + offset;
}

# ADD two registers.
:add16 rn, rm is op_15_8=0x88 & rm & rn { rn = rn + rm; }

# SUB two registers.
:sub16 rn, rm is op_15_8=0x89 & rm & rn { rn = rn - rm; }

# AND two registers.
:and16 rn, rm is op_15_8=0x8a & rm & rn { rn = rn & rm; }

# OR two registers.
:or16  rn, rm is op_15_8=0x8b & rm & rn { rn = rn | rm; }

# XOR two registers.
:xor16 rn, rm is op_15_8=0x8c & rm & rn { rn = rn ^ rm; }

# Add an unsigned immediate to the stack pointer.
:addsp16 r14, #offset is r14 & op_15_8=0x92 & imm_7_0 [
	offset = imm_7_0 * 4;
] {
	r14 = r14 + offset;
}

# Branch if not equal to zero.
:bne16.d1 #zero, rn, #jump_dest is op_15_9=0b1011101 & imm_8_4 & rn [
	zero = 0;
	jump_dest = inst_start + imm_8_4 * 2;
] {
	local delayflag = (0 != rn);
	delayslot(1);
	if !delayflag goto inst_next;
	goto [jump_dest:4];
}

# Unconditional absolute jump to register 15 (link register), delayed by 2.
:j16.d2 rn is op_15_4=0xa02 & rn & rn=15 {
	delayslot(2);
	return [rn];
}

# Unconditional absolute jump to register, delayed by 2.
:j16.d2 rn is op_15_4=0xa02 & rn {
	delayslot(2);
	goto [rn];
}

# Unconditional absolute jump to register 15 (link register).
:j16 rn is op_15_4=0xa03 & rn & rn=15 {
	return [rn];
}

# Unconditional absolute jump to register.
:j16 rn is op_15_4=0xa03 & rn {
	goto [rn];
}

# Unconditional relative jump by immediate, delayed by 1.
:j16.d1 #jump_dest is op_15_7=0b101000010 & simm_6_0 [
	jump_dest = inst_start + simm_6_0 * 2;
] {
	delayslot(1);
	goto [jump_dest:4];
}

# Move data from register to register.
:mv16 rn, rm is op_15_8=0x93 & rm & rn {
	rn = rm;
}

# Move immediate to register.
:mv16 rn, #simm_10_4 is op_15_11=0b10011 & simm_10_4 & rn {
	rn = simm_10_4;
}

# Load sign-extended byte relative to a register between r1 and r8.
:lb16 rn_r1_r8, #offset^(rm_r1_r8_5_3) is op_15_6=0b1010001010 & rm_r1_r8_5_3 & rn_r1_r8 [
	offset = 0;
] {
	rn_r1_r8 = sext(*[DMEM]:1 (rm_r1_r8_5_3));
}

# Load zero-extended byte relative to a register between r1 and r8.
:lbu16 rn_r1_r8, #offset^(rm_r1_r8_5_3) is op_15_6=0b1010001011 & rm_r1_r8_5_3 & rn_r1_r8 [
	offset = 0;
] {
	rn_r1_r8 = zext(*[DMEM]:1 (rm_r1_r8_5_3));
}

# Load word from an offset relative to a register between r1 and r8.
:lw16 rn, #offset^(rm_r1_r8_6_4) is op_15_10=0b101010 & imm_9_7 & rm_r1_r8_6_4 & rn [
	offset = imm_9_7 * 4;
] {
	rn = *[DMEM](rm_r1_r8_6_4 + offset);
}

# Load word from an offset relative to the stack pointer.
:lw16 rn, #offset^(r14) is r14 & op_15_9=0b1010010 & imm_8_4 & rn [
	offset = -0x80 + imm_8_4 * 4;
] {
	rn = *[DMEM](r14 + offset);
}

# Store word at an offset relative to a register between r1 and r8.
:sw16 rn, #offset^(rm_r1_r8_6_4) is op_15_10=0b101011 & imm_9_7 & rm_r1_r8_6_4 & rn [
	offset = imm_9_7 * 4;
] {
	*[DMEM](rm_r1_r8_6_4 + offset) = rn;
}

# Store word at an offset relative to the stack pointer.
:sw16 rn, #offset^(r14) is r14 & op_15_9=0b1010011 & imm_8_4 & rn [
	offset = -0x80 + imm_8_4 * 4;
] {
	*[DMEM](r14 + offset) = rn;
}


# 16-bit instruction bundles/pairs, prefix instructions.

# Add stack pointer to immediate and store in register.
:add16 rn_even, r14, #calc_imm is bundle=0 & r14 & op_15_9=0b0100101 & imm_8_3 & rn_even [
	calc_imm = -0x100 | (imm_8_3 << 2);
	bundle = 1;
	globalset(inst_next, bundle);
] {
	rn_even = r14 + calc_imm:4;
}

:mv16 rn_odd, rm_6_3 is bundle=0 & op_15_7=0b010010011 & rm_6_3 & rn_odd [
	bundle = 1;
	globalset(inst_next, bundle);
] {
	rn_odd = rm_6_3;
}


# 16-bit instruction bundles/pairs, postfix instructions.

# Unconditional absolute jump to register 15 (link register).
:j16 rn is bundle=1 & op_15_4=0x203 & rn & rn=15 {
	return [rn];
}

# Unconditional absolute jump to register.
:j16 rn is bundle=1 & op_15_4=0x203 & rn {
	goto [rn];
}

# 16-bit NOP, bundled-only.
:nop16.l is bundle=1 & op_15_0=0x2000 {}
